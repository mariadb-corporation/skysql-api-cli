/*
SkySQL API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skysql

import (
	"encoding/json"
)

// NewConfigurationRequest Request body to create a new MariaDB Configuration
type NewConfigurationRequest struct {
	Name string `json:"name"`
	Topology string `json:"topology"`
	ConfigJson *string `json:"config_json,omitempty"`
}

// NewNewConfigurationRequest instantiates a new NewConfigurationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewConfigurationRequest(name string, topology string) *NewConfigurationRequest {
	this := NewConfigurationRequest{}
	this.Name = name
	this.Topology = topology
	var configJson string = "{}"
	this.ConfigJson = &configJson
	return &this
}

// NewNewConfigurationRequestWithDefaults instantiates a new NewConfigurationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewConfigurationRequestWithDefaults() *NewConfigurationRequest {
	this := NewConfigurationRequest{}
	var configJson string = "{}"
	this.ConfigJson = &configJson
	return &this
}

// GetName returns the Name field value
func (o *NewConfigurationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewConfigurationRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewConfigurationRequest) SetName(v string) {
	o.Name = v
}

// GetTopology returns the Topology field value
func (o *NewConfigurationRequest) GetTopology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topology
}

// GetTopologyOk returns a tuple with the Topology field value
// and a boolean to check if the value has been set.
func (o *NewConfigurationRequest) GetTopologyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Topology, true
}

// SetTopology sets field value
func (o *NewConfigurationRequest) SetTopology(v string) {
	o.Topology = v
}

// GetConfigJson returns the ConfigJson field value if set, zero value otherwise.
func (o *NewConfigurationRequest) GetConfigJson() string {
	if o == nil || o.ConfigJson == nil {
		var ret string
		return ret
	}
	return *o.ConfigJson
}

// GetConfigJsonOk returns a tuple with the ConfigJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewConfigurationRequest) GetConfigJsonOk() (*string, bool) {
	if o == nil || o.ConfigJson == nil {
		return nil, false
	}
	return o.ConfigJson, true
}

// HasConfigJson returns a boolean if a field has been set.
func (o *NewConfigurationRequest) HasConfigJson() bool {
	if o != nil && o.ConfigJson != nil {
		return true
	}

	return false
}

// SetConfigJson gets a reference to the given string and assigns it to the ConfigJson field.
func (o *NewConfigurationRequest) SetConfigJson(v string) {
	o.ConfigJson = &v
}

func (o NewConfigurationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["topology"] = o.Topology
	}
	if o.ConfigJson != nil {
		toSerialize["config_json"] = o.ConfigJson
	}
	return json.Marshal(toSerialize)
}

type NullableNewConfigurationRequest struct {
	value *NewConfigurationRequest
	isSet bool
}

func (v NullableNewConfigurationRequest) Get() *NewConfigurationRequest {
	return v.value
}

func (v *NullableNewConfigurationRequest) Set(val *NewConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNewConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNewConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewConfigurationRequest(val *NewConfigurationRequest) *NullableNewConfigurationRequest {
	return &NullableNewConfigurationRequest{value: val, isSet: true}
}

func (v NullableNewConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


