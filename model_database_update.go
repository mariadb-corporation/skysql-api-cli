/*
SkySQL API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skysql

import (
	"encoding/json"
)

// DatabaseUpdate Request body to update a database - currently limited to name only
type DatabaseUpdate struct {
	Name string `json:"name"`
}

// NewDatabaseUpdate instantiates a new DatabaseUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseUpdate(name string) *DatabaseUpdate {
	this := DatabaseUpdate{}
	this.Name = name
	return &this
}

// NewDatabaseUpdateWithDefaults instantiates a new DatabaseUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseUpdateWithDefaults() *DatabaseUpdate {
	this := DatabaseUpdate{}
	return &this
}

// GetName returns the Name field value
func (o *DatabaseUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatabaseUpdate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatabaseUpdate) SetName(v string) {
	o.Name = v
}

func (o DatabaseUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseUpdate struct {
	value *DatabaseUpdate
	isSet bool
}

func (v NullableDatabaseUpdate) Get() *DatabaseUpdate {
	return v.value
}

func (v *NullableDatabaseUpdate) Set(val *DatabaseUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseUpdate(val *DatabaseUpdate) *NullableDatabaseUpdate {
	return &NullableDatabaseUpdate{value: val, isSet: true}
}

func (v NullableDatabaseUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


